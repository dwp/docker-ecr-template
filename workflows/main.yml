name: Master

on: workflow_dispatch

env:
  IMAGE_NAME: docker-ecr-template

jobs:
  get-publish-version:
    runs-on: ubuntu-latest
    outputs:
      publish-version: ${{ steps.get-publish-version.outputs.publish-version }}
    steps:
      - name: Prepare SemVer
        id: prepare-semver
        run: |
          LATEST_VERSION=$(curl --silent "https://api.github.com/repos/${{ github.repository }}/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          [  -z "$LATEST_VERSION" ] && LATEST_VERSION="0.0.0"
          echo ::set-output name=latest_version_out::$LATEST_VERSION
          commit_message="${{ github.event.head_commit.message }}"
          if [[ "${commit_message,,}" == *"major release"* ]]; then
            echo ::set-output name=semver_increment::"m"
          elif [[ "${commit_message,,}" == *"minor release"* ]]; then
            echo ::set-output name=semver_increment::"i"
          else
            echo ::set-output name=semver_increment::"p"
          fi
      - name: Increment SemVer
        id: semver
        uses: matt-FFFFFF/simple-semver@v0.1.0
        with:
          semver-input: ${{ steps.prepare-semver.outputs.latest_version_out }}
          increment: ${{ steps.prepare-semver.outputs.semver_increment }}
      - name: Get publish version
        id: get-publish-version
        run: echo "::set-output name=publish-version::${{ steps.semver.outputs.semver }}"

  publish-github-release:
    runs-on: ubuntu-latest
    needs: [get-publish-version, publish-docker]
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.get-publish-version.outputs.publish-version }}
          release_name: Release ${{ needs.get-publish-version.outputs.publish-version }}
          draft: false
          prerelease: false

  publish-docker:
    runs-on: ubuntu-latest
    needs: get-publish-version
    steps:
      - uses: actions/checkout@master
      - name: Get release version
        id: get_version
        run: echo RELEASE_VERSION=$(echo ${GITHUB_REF:10}) >> $GITHUB_ENV
      - name: Build Docker Image
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ECR_TEMP_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ECR_TEMP_SECRET_ACCESS_KEY}}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_ECR_TEMP_SESSION_TOKEN }}
          AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}
          DEV_AWS_ACCESS_KEY_ID: ${{ secrets.DEV_AWS_ECR_TEMP_ACCESS_KEY_ID }}
          DEV_AWS_SECRET_ACCESS_KEY: ${{ secrets.DEV_AWS_ECR_TEMP_SECRET_ACCESS_KEY}}
          DEV_AWS_SESSION_TOKEN: ${{ secrets.DEV_AWS_ECR_TEMP_SESSION_TOKEN }}
          DEV_AWS_ACCOUNT: ${{ secrets.DEV_AWS_ACCOUNT }}
          AWS_REGION: eu-west-2
          SEM_VER: "${{ needs.get-publish-version.outputs.publish-version }}"
        run:
          export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN ;
          export DEV_AWS_ACCESS_KEY_ID DEV_AWS_SECRET_ACCESS_KEY DEV_AWS_SESSION_TOKEN ; 
          export AWS_REGION AWS_ACCOUNT DEV_AWS_ACCOUNT ;
          ../build_and_push_to_ecr.sh
        working-directory: build

  snyk-monitor:
    runs-on: ubuntu-latest
    needs: publish-docker
    steps:
      - uses: actions/checkout@v2
      - name: Run Snyk monitoring
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
          image: ${{ env.IMAGE_NAME }}
          args: --file=Dockerfile --policy-path=./.snyk --org=dwp-dataworks
